<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import math

#Try install numpy on Polos PC ? 
#import numpy as np

"""
This sample PCell implements a library called "MyLib" with a single PCell that
draws a Siemens_star. It demonstrates the basic implementation techniques for a PCell 
and how to use the "guiding shape" feature to implement a handle for the Siemens_star
radius.

NOTE: after changing the code, the macro needs to be rerun to install the new
implementation. The macro is also set to "auto run" to install the PCell 
when KLayout is run.
"""

class Create: 
    
      
  def align(shapes,a,b,c):
    """
    Produce the defualt alignment marks and inserts it into the specified shapes.

    Parameters:
    - shapes: The target shape container.
    - a: The width of the lines of cross.
    - b: the length of the cross's arms.
    - c: The length of the converging portion of the alignment mark.

    Returns:
    None
    """
    
    t = pya.DTrans(1)
    pts = []
    pts.append(pya.DPoint(0, 0)) 
    pts.append(pya.DPoint(c, a/2))
    pts.append(pya.DPoint(c + b, a/2))
    pts.append(pya.DPoint(c + b, -a/2))
    pts.append(pya.DPoint(c, -a/2))
    
    # create the shape
    for j in range(3):
      for i in range(len(pts)-5, len(pts)):
        pts.append(pts[i] *t)
      
    shapes.insert(pya.DSimplePolygon(pts))
    
    
  def bracket(shapes, line_width, width, transform=pya.DTrans(0, False, 0, 0)):
    """
    Produce a bracket shape and insert it into the specified shapes.

    Parameters:
    - shapes: The target shape container.
    - line_width: The width of the bracket lines.
    - width: The overall width of the bracket.
    - transform: The transformation to be applied to the bracket shape.

    Returns:
    None
    """
    gap = line_width
    t = pya.DTrans(1)

    # Define the bracket points
    bracket_points = [
        pya.DPoint(line_width / 2 + gap, line_width / 2 + gap),
        pya.DPoint(width / 2, line_width / 2 + gap),
        pya.DPoint(width / 2, line_width + gap),
        pya.DPoint(line_width + gap, line_width + gap),
        pya.DPoint(line_width + gap, width / 2),
        pya.DPoint(line_width / 2 + gap, width / 2),
    ]

    # Create the bracket shape
    bracket_shape = pya.DSimplePolygon(bracket_points)

    # Insert the bracket shape into the specified shapes with the provided transformation
    for _ in range(4):
        shapes.insert(bracket_shape.transformed(transform))
        bracket_shape = bracket_shape.transformed(t)
        
        

  def cross(shapes, line_width, width, transform=pya.DTrans(0, False, 0, 0)):
    """
    Produce a cross shape and insert it into the specified shapes.

    Parameters:
    - shapes: The target shape container.
    - line_width: The width of the cross lines.
    - width: The overall width of the cross.
    - transform: The transformation to be applied to the cross shape.

    Returns:
    None
    """
    half_line_width = line_width / 2
    half_width = width / 2

    # Define the list of points for the perimeter of the cross shape
    cross_points = [
        pya.DPoint(half_width, -half_line_width),  # Top right
        pya.DPoint(half_line_width, -half_line_width),  # Top right inner
        pya.DPoint(half_line_width, -half_width),  # Top right inner
        pya.DPoint(-half_line_width, -half_width),  # Top left inner
        pya.DPoint(-half_line_width, -half_line_width),  # Top left inner
        pya.DPoint(-half_width, -half_line_width),  # Top left
        pya.DPoint(-half_width, half_line_width),   # Bottom left
        pya.DPoint(-half_line_width, half_line_width),   # Bottom left inner
        pya.DPoint(-half_line_width, half_width),  # Bottom left inner
        pya.DPoint(half_line_width, half_width),  # Bottom right inner
        pya.DPoint(half_line_width, half_line_width),  # Bottom right inner
        pya.DPoint(half_width, half_line_width),   # Bottom right
    ]

    # Create the cross shape using the list of points
    cross_shape = pya.DSimplePolygon(cross_points)

    # Insert the cross shape into the specified shapes with the provided transformation
    shapes.insert(cross_shape.transformed(transform))
 
        
  def hallbar(shapes, bar_gap, side_contact_length, side_contact_width, main_contact_length, main_contact_width, transform=pya.DTrans(0, False, 0, 0), n_side_contacts=4):
    """
    Produce a hallbar and insert it into the specified shapes.

    Parameters:
    - shapes: The target shape container.
    - bar_gap: The distance in um between the edge of one side contact and another
    - side_contact_length: The length of the side contacts in um
    - side_contact_width: The width of the side contacts in um
    - main_contact_length: The length in um of the main contacts measured from the end of the side contacts.
    - main_contact_width: The width in um of the main contacts
    - transform: a transform that is applied to the structure when it is inserted into the shape
    - n_side_contacts: The number of side contacts (is rounded down to nearest even number)

    Returns:
    None
    """
    # Define the points for the hall bar
    #define starting points (top left hand corner) such that the center of the structure will be a 0,0
    x0 = - ( 2* main_contact_length  + bar_gap*(n_side_contacts/2 - 1) + side_contact_width*( n_side_contacts/2 ))/2 ; y0 = main_contact_width/2;
    
    x = [x0]
    y = [y0]
    
    #define the points of the top trace of structure
    for i in range(int(n_side_contacts/2)):
      x_offset = x0 +  (bar_gap +  side_contact_width)* i + main_contact_length
      
      x.append(x_offset)
      y.append(y0)
      
      x.append(x_offset)
      y.append(y0 + side_contact_length)
      
      x.append(x_offset + side_contact_width)
      y.append(y0 + side_contact_length)
      
      x.append(x_offset + side_contact_width)
      y.append(y0)
    
    x.append(x_offset + side_contact_width + main_contact_length)
    y.append(y0)
    
    #We then mirror the y points across the x-axis by multiplying them by -1 and reverse so that the list gose clockwise around the shape
    
    y2 = [-i for i in reversed(y)]
    x2 = [i for i in reversed(x)]
    
    x += x2
    y += y2
    
    #We then convert to dpoints
    
    pts = [pya.DPoint(x[i],y[i]) for i , xi in enumerate(x)]
     
    #We then add the two x and y lists together 
      
  # Create the hall bar shape using all the points
    hall_bar = pya.DSimplePolygon(pts)
    shapes.insert(hall_bar.transformed(transform))
 


  def lines(shapes, d0, dd, h, w0, dw, n):
    x = 0
    d = d0
    w = w0
    for i in range(0,n):
      shapes.insert(pya.DBox(x, 0, w + x ,h))
      x = x + d + w
      d = d + dd 
      
      w = w + dw

    
  def siemens_star(shape, n, ru):
    # This is the main part of the implementation: create the layout
    verts  = n * 2
    # compute the Siemens_star
    da = math.pi * 2 / verts
    #pts = [ pya.DPoint(self.ru * math.cos(i * da), self.ru * math.sin(i * da)) for i in range(0, self.n) ]
    pts = []
    for i in range(0, verts):
      if i % 2 == 0:
        pts.append( pya.DPoint(0, 0))
      else:
        pts.append( pya.DPoint(ru * math.cos(i * da), ru * math.sin(i * da)))
        pts.append( pya.DPoint(ru * math.cos((i + 1) * da), ru * math.sin((i + 1) * da)))
    # create the shape
    shape.insert(pya.DPolygon(pts))
      

  def text(shape = None, dbu = 0.001, string = "missing text", text_width = 100, x = 0, y = 0):
    #text_width: width of the text in um
    # might give error if text width equals 0
    if shape == None:
      print("No shape provided") 
      return
    if text_width == 0:
      print("text_width cannot be 0") 
      return
      
    text = pya.TextGenerator.default_generator().text(string, dbu / (10*text_width))
    text.move(x/dbu, y/dbu)
    shape.insert(text)
      
  def vernier(shapes, spacing, width, height, n, transform, mark_center):
    x = - (spacing*(n-1) + width)/2 
    for i in range(n):
      box = pya.DBox(x, -height/2, x + width ,height/2)
      x = x + spacing
      shapes.insert(box.transformed(transform))
    
    if (mark_center and n % 2 &gt; 0):
      shapes.insert(pya.DBox(-width/2, -(height + width) , width/2, -(height/2 + width) ).transformed(transform))

    
    
     
  def vernier_align(shapes1,shapes2, msd, lc, line_width, line_height, overlap, n, mark_center, center_cross = False):
    vc = msd - lc
    width = (n + 2) * msd 
    rotate = pya.DTrans(1,False, 0,0)
    
    t1 =  pya.DTrans(0,False, 0,-width/2)
    t2 = pya.DTrans(2,False, 0 ,-width/2 + line_height - overlap)
    #side 1
    
    #Produce each of the four sides and then rotate 90 deg to produce the next 
    for _ in range(4):
      Create.vernier(shapes = shapes1, spacing = msd, width =  line_width,height =  line_height ,n = n, transform = t1,mark_center =  mark_center)
      Create.vernier(shapes = shapes2, spacing = vc, width =  line_width,height =  line_height ,n = n, transform = t2,mark_center =  mark_center)
      t1 = rotate * t1
      t2 = rotate * t2
    if center_cross:
      Create.bracket(shapes = shapes1, line_width = line_width, width = 2*line_height)
      Create.cross(shapes = shapes2, line_width = line_width, width = 2*line_height)   
    
    
  def ruler(th, tw, lw,length,d,major):
    n_teeth = int(length / d)
    x0 = - (length + d)/2
    x = x0
    pts = []
    pts.append(pya.DPoint(x0, 0))
    pts.append(pya.DPoint(x0, lw))
    for i in range(0, n_teeth):
      x = x + d 
      pts.append(pya.DPoint(x - tw/2, lw))
      if i % major == 0:
        pts.append(pya.DPoint(x - tw/2, lw + th * 2))
        pts.append(pya.DPoint(x + tw - tw/2, lw + th * 2))  
      else:
        pts.append(pya.DPoint(x - tw/2, lw + th))
        pts.append(pya.DPoint(x + tw - tw/2, lw + th))
      pts.append(pya.DPoint(x + tw - tw/2, lw))
    pts.append(pya.DPoint(x + d, lw))
    pts.append(pya.DPoint(x + d, 0))
  
    return pya.DSimplePolygon(pts)
    
    
    
    


###############################################################################
#              PCELL DECLARATIONS
##################################################################################    
    
    
    
    



class Align_default(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the Siemens_star
  """

  def __init__(self):

    # Important: initialize the super class
    super(Align_default, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer 1")
    self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    self.param("obj", self.TypeInt, "Objective", choices = [ [ "0.5x", 0 ], [ "1x", 1 ], [ "2.5x", 2 ], [ "5x", 3 ], [ "10x", 4 ] ], default = 0)
    self.param("vernier", self.TypeBoolean, "Add vernier", default = False)  
    self.param("l2", self.TypeLayer, "Layer 2")
    self.param("label", self.TypeString, "Label", default = None) 
    
    #Provide scaler value that assignes whet quadrent the label is in 
    self.param("text_x", self.TypeDouble, "Label X", default = -0.8) 
    self.param("text_y", self.TypeDouble, "Label Y", default = 0.8  ) 

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    
    objname = [ "0.5x","1x","2.5x","5x","10x"]
    return "Align(L=" + str(self.l) + ", obj = " + objname[self.obj] + ")"

  def produce_impl(self):
    obj = self.obj 
    A = [250, 140, 50, 25, 15]
    B = [2000, 1000, 400, 200, 100]
    C = [1000, 500, 200, 100, 50]
    D = [40,20,9,5,2.2]
    
    shapes = self.cell.shapes(self.l_layer)
    Create.align(shapes,A[obj],B[obj],C[obj])
    
    
    msd_list = [200,100,40,20,10]
    lc_list = [20,10,4,2,1]
    line_width_list = D#  [40,20,8,4,2]
    line_height_list = A #[200,100,40,20,10]
    overlap_list = [100,50,20,10,5]
    #n_list = [21,21,21,21,21]
    if self.label is not None:
      Create.text(shape = self.cell.shapes(self.l_layer), dbu = self.layout.dbu,  string = self.label, text_width = D[obj], x = ( B[obj] + C[obj]) * self.text_x, y =  ( B[obj] + C[obj])*self.text_y )
      
    if self.vernier:
      n = math.ceil(1.2*2*(B[obj]+C[obj])/msd_list[obj]) // 2 * 2 + 1
      Create.vernier_align(shapes1=self.cell.shapes(self.l_layer),shapes2=self.cell.shapes(self.l2_layer), msd=msd_list[obj], lc=lc_list[obj], line_width=line_width_list[obj], line_height=line_height_list[obj], overlap=overlap_list[obj], n = n, mark_center=True)
      


class HallBar(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the Vernier
  """

  def __init__(self):

    # Important: initialize the super class
    super(HallBar, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer")
    self.param("l2", self.TypeLayer, "Layer 2")
    self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    self.param("bar_gap", self.TypeDouble, "Gap between side contacts", default = 300)
    self.param("side_contact_length", self.TypeDouble, "Side contact length", default = 200)
    self.param("side_contact_width", self.TypeDouble, "Side contact width", default = 100)
    self.param("main_contact_length", self.TypeDouble, "Main contact length", default = 200)
    self.param("main_contact_width", self.TypeDouble, "Main contact width", default = 100)
    self.param("n_side_contacts", self.TypeInt, "Number of side contacts", default = 4)  


  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "HallBar(L=" + str(self.l) + ",Gap=" + ('%.3f' % self.bar_gap) + ")"

  def produce_impl(self):
    shapes1 = self.cell.shapes(self.l_layer)
    Create.hallbar(shapes = shapes1 ,bar_gap = self.bar_gap, side_contact_length = self.side_contact_length, side_contact_width = self.side_contact_width , main_contact_length = self.main_contact_length, main_contact_width = self.main_contact_width , n_side_contacts = self.n_side_contacts)
      




    
class Lines(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the Lines
  """

  def __init__(self):

    # Important: initialize the super class
    super(Lines, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer")
    self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    self.param("h", self.TypeDouble, "Height", default = 100)
    self.param("w0", self.TypeDouble, "Initial Width", default = 10)
    self.param("dw", self.TypeDouble, "Change in width", default = 0)
    self.param("d0", self.TypeDouble, "Initial Spacing", default = 100)
    self.param("dd", self.TypeDouble, "Change in spacing", default = 0)
    self.param("n", self.TypeInt, "Number of lines", default = 10)     
    # this hidden parameter is used to determine whether the radius has changed
    # or the "s" handle has been moved
    self.param("ru", self.TypeDouble, "Radius", default = 0.0, hidden = True)
    self.param("rd", self.TypeDouble, "Double radius", readonly = True)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Lines(L=" + str(self.l) + ",H=" + ('%.3f' % self.h) + ")"

  def produce_impl(self):
    Create.lines(shapes = self.cell.shapes(self.l_layer), d0 = self.d0, dd = self.dd, h = self.h, w0 = self.w0, dw = self.dw, n = self.n)
    
    
    
    

class Siemens_star(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the Siemens_star
  """

  def __init__(self):

    # Important: initialize the super class
    super(Siemens_star, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer")
    self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    self.param("r", self.TypeDouble, "Radius", default = 100)
    self.param("n", self.TypeInt, "Number of triangles", default = 32)     
    # this hidden parameter is used to determine whether the radius has changed
    # or the "s" handle has been moved
    self.param("ru", self.TypeDouble, "Radius", default = 0.0, hidden = True)
    self.param("rd", self.TypeDouble, "Double radius", hidden = True)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Siemens_star(L=" + str(self.l) + ",R=" + ('%.3f' % self.r) + ")"
  
  def coerce_parameters_impl(self):
  
    # We employ coerce_parameters_impl to decide whether the handle or the 
    # numeric parameter has changed (by comparing against the effective 
    # radius ru) and set ru to the effective radius. We also update the 
    # numerical value or the shape, depending on which on has not changed.
    rs = None
    if isinstance(self.s, pya.DPoint): 
      # compute distance in micron
      rs = self.s.distance(pya.DPoint(0, 0))
    if rs != None and abs(self.r-self.ru) &lt; 1e-6:
      self.ru = rs
      self.r = rs 
    else:
      self.ru = self.r
      self.s = pya.DPoint(-self.r, 0)
    
    self.rd = 2*self.r
  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    self.r = self.shape.bbox().width() * self.layout.dbu / 2
    self.l = self.layout.get_info(self.layer)
  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans(self.shape.bbox().center())
  
  def produce_impl(self):
    shape = self.cell.shapes(self.l_layer)
    Create.siemens_star(shape, self.n, self.ru)



class Spiral(pya.PCellDeclarationHelper):
  """
  The PCell declaration for a spiral
  """

  def __init__(self):

    # Important: initialize the super class
    super(Spiral, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer")
    self.param("n", self.TypeInt, "Number of points", default = 64)  
    self.param("inner_r", self.TypeDouble, "Inner Radius", default = 10)	
    self.param("outer_r", self.TypeDouble, "Outer Radius", default = 100)
    self.param("width", self.TypeDouble, "Width", default = 10)
    self.param("spacing", self.TypeDouble, "Spacing", default = 10)
    self.param("inner_handle", self.TypeDouble, "Inner handle", default = pya.DPoint(0,0))	
    self.param("outer_handle", self.TypeDouble, "Outer handle", default = pya.DPoint(0,0))   
    # this hidden parameter is used to determine whether the radius has changed
    # or the "s" handle has been moved
    self.param("inner_mem", self.TypeDouble, "Inner_mem", default = 0.0, hidden = True)
    self.param("outer_mem", self.TypeDouble, "outer_mem", default = 0.0, hidden = True)
  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Spiral(L=" + str(self.l) + ",Outer radius=" + ('%.3f' % self.outer_r) + ")"
  

  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    self.inner_r = self.shape.bbox().width() * self.layout.dbu / 4
    self.outer_r = self.shape.bbox().width() * self.layout.dbu / 2   
    self.l = self.layout.get_info(self.layer)
  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans(self.shape.bbox().center())
  
  def produce_impl(self):
  
    # This is the main part of the implementation: create the layout
    #fetch parameters
    inner_r_dbu = self.inner_r / self.layout.dbu
    outer_r_dbu = self.outer_r / self.layout.dbu
    # compute the circle
    pts = []
    da = math.pi * 2 / self.n
    dr = (self.width + self.spacing)/self.n/self.layout.dbu
    current_radius = inner_r_dbu
    current_angle = 0
    while current_radius &lt; outer_r_dbu:
      pts.append(pya.Point.from_dpoint(pya.DPoint(current_radius * math.cos(current_angle) , current_radius * math.sin(current_angle))))
      current_radius += dr
      current_angle = (current_angle + da)%(math.pi*2)
    # create the shape
    self.cell.shapes(self.l_layer).insert(pya.Path(pts,self.width/self.layout.dbu))
    
    

class Ruler(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the Ruler
  """

  def __init__(self):

    # Important: initialize the super class
    super(Ruler, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer")
    self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    self.param("th", self.TypeDouble, "Tooth Height", default = 50)
    self.param("tw", self.TypeDouble, "Tooth Width", default = 10)
    self.param("lw", self.TypeDouble, "Line Width", default = 10)
    self.param("length", self.TypeDouble, "Length", default = 1000)
    self.param("d", self.TypeDouble, "Spacing", default = 100)
    self.param("major", self.TypeInt, "Major ticks", default = 5)
         
    # this hidden parameter is used to determine whether the radius has changed
    # or the "s" handle has been moved
  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Ruler(L-=" + str(self.l) + ",Lenth=" + ('%.3f' % self.length) + ")"
  
  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_box() or self.shape.is_polygon() or self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    self.length = self.shape.bbox().width() * self.layout.dbu 
    self.l = self.layout.get_info(self.layer)
  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans(self.shape.bbox().center())
  
  def produce_impl(self):
  
    # This is the main part of the implementation: create the layout
    #rotate 90
    t = pya.DTrans(0)
    polygon = Create.ruler( self.th, self.tw, self.lw,self.length,self.d,self.major)
    shapes = self.cell.shapes(self.l_layer)
    shapes.insert(polygon.transform(t))
    
    

    
    
class Vernier(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the Vernier
  """

  def __init__(self):

    # Important: initialize the super class
    super(Vernier, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer")
    self.param("l2", self.TypeLayer, "Layer 2")
    self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    self.param("height", self.TypeDouble, "Height", default = 100)
    self.param("width", self.TypeDouble, "Width", default = 20)
    self.param("MSD", self.TypeDouble, "Main scale division", default = 100)
    self.param("LC", self.TypeDouble, "Least count", default = 10)
    self.param("overlap", self.TypeDouble, "Overlap", default = 20)
    self.param("offset", self.TypeDouble, "Offset", default = 0)
    self.param("n", self.TypeInt, "Number", default = 11)  
    self.param("mark_center", self.TypeBoolean, "Mark Center", default = True)  


  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Vernier(L=" + str(self.l) + ",MSD=" + ('%.3f' % self.MSD) + ")"

  def produce_impl(self):
    # calculate the vernier constant
    VC = self.MSD - self.LC
    shapes1 = self.cell.shapes(self.l_layer)
    shapes2 = self.cell.shapes(self.l2_layer)
    t1 = pya.DTrans(0,False, 0,0)
    t2 = pya.DTrans(2,False, 0 ,self.offset + self.height - self.overlap)
    
    # instantite the the two scales 
    Create.vernier(shapes = shapes1, spacing = self.MSD,width =  self.width,height =  self.height ,n =  self.n, transform = t1,mark_center =  self.mark_center)
    Create.vernier(shapes = shapes2, spacing = VC,width =  self.width, height = self.height, n=  self.n, transform = t2,mark_center = self.mark_center)
    
  
      
class VernierAlign(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the Vernier
  """

  def __init__(self):

    # Important: initialize the super class
    super(VernierAlign, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Main scale layer")
    self.param("l2", self.TypeLayer, "Vernier scale layer")
    self.param("s", self.TypeShape, "", default = pya.DPoint(0, 0))
    self.param("line_height", self.TypeDouble, "line height", default = 100)
    self.param("line_width", self.TypeDouble, "line width", default = 20)
    self.param("width", self.TypeDouble, "width", default = 1100, hidden = True)
    self.param("msd", self.TypeDouble, "Main scale division", default = 100)
    # Least count is the resolution of the vernier scale
    self.param("lc", self.TypeDouble, "Least count", default = 10)
    self.param("overlap", self.TypeDouble, "Overlap", default = 20)
    self.param("n", self.TypeInt, "Number of markings", default = 11)  
    self.param("mark_center", self.TypeBoolean, "Mark Center", default = True)  
    


  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Vernier Align(L=" + str(self.l) + ",MSD=" + ('%.0f' % self.msd) + ",LC=" + ('%.0f' % (self.lc)) +  ")"

  def produce_impl(self):
    Create.vernier_align(shapes1=self.cell.shapes(self.l_layer),shapes2=self.cell.shapes(self.l2_layer), msd=self.msd, lc=self.lc, line_width=self.line_width, line_height=self.line_height, overlap=self.overlap, n = self.n, mark_center=self.mark_center, center_cross = self.mark_center)
    




class MyLib(pya.Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):
  
    # Set the description
    self.description = "Nanomade Test patterns"
    
    # Create the PCell declarations
    self.layout().register_pcell("Siemens_star", Siemens_star())
    self.layout().register_pcell("Spiral", Spiral())
    self.layout().register_pcell("Lines", Lines())
    self.layout().register_pcell("Ruler", Ruler())
    self.layout().register_pcell("Align_default", Align_default())
    self.layout().register_pcell("Vernier", Vernier())
    self.layout().register_pcell("VernierAlign", VernierAlign())
    self.layout().register_pcell("HallBar", HallBar())
    # That would be the place to put in more PCells ...
    
    # Register us with the name "TestLib".
    # If a library with that name already existed, it will be replaced then.
    self.register("TestLib")


# Instantiate and register the library
MyLib()
</text>
</klayout-macro>
